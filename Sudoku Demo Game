import tkinter as tk
import random

class SudokuGame:
    def __init__(self):
        self.grid = [[0 for _ in range(9)] for _ in range(9)]

    def randomNum(self, num_to_place=30):
        for _ in range(num_to_place):
            row, col = random.randint(0, 8), random.randint(0, 8)
            while self.grid[row][col] != 0:
                row, col = random.randint(0, 8), random.randint(0, 8)
            num = random.randint(1, 9)
            while not self.is_valid_move(row, col, num):
                num = random.randint(1, 9)
            self.grid[row][col] = num

    def is_valid_move(self, row, col, num):
        if num in self.grid[row]:
            return False
        if num in [self.grid[i][col] for i in range(9)]:
            return False
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(start_row, start_row + 3):
            for j in range(start_col, start_col + 3):
                if self.grid[i][j] == num:
                    return False
        return True

class SudokuCheck:
    def __init__(self, grid):
        self.grid = grid

    def is_valid_grid(self):
        for row in range(9):
            for col in range(9):
                num = self.grid[row][col]
                if num != 0:
                    if not self.is_valid_move(row, col, num):
                        return False
        return True

    def is_valid_move(self, row, col, num):
        if self.grid[row].count(num) > 1:
            return False
       
        col_nums = [self.grid[i][col] for i in range(9)]
        if col_nums.count(num) > 1:
            return False
        
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        box_nums = [self.grid[i][j] for i in range(start_row, start_row + 3) for j in range(start_col, start_col + 3)]
        if box_nums.count(num) > 1:
            return False
        return True

class SudokuGrid:
    def __init__(self, root):
        self.root = root
        self.root.title("Sudoku Demo Game")
        
        self.canvas = tk.Canvas(self.root, width=450, height=450)
        self.canvas.pack()

        self.entries = [[None for _ in range(9)] for _ in range(9)] 
        self.sudoku = SudokuGame()
        self.draw_grid()
        self.sudoku.randomNum()
        self.draw_numbers()

        self.check_button = tk.Button(self.root, text="Check Result", command=self.check_solution)
        self.check_button.pack()

    def draw_grid(self):
        cell_size = 50  
        for i in range(10): 
            line_width = 2 if i % 3 == 0 else 1 
            self.canvas.create_line(i * cell_size, 0, i * cell_size, 450, width=line_width)
            self.canvas.create_line(0, i * cell_size, 450, i * cell_size, width=line_width)

    def draw_numbers(self):
        cell_size = 50
        for row in range(9):
            for col in range(9):
                num = self.sudoku.grid[row][col]
                if num != 0:
                    x = col * cell_size + cell_size // 2
                    y = row * cell_size + cell_size // 2
                    self.canvas.create_text(x, y, text=str(num), font=('Arial', 18))
                else:
                    entry = tk.Entry(self.root, width=2, font=('Arial', 18), justify='center')
                    entry.place(x=col * cell_size + 5, y=row * cell_size + 5, width=40, height=40)
                    self.entries[row][col] = entry

    def check_solution(self):
        for row in range(9):
            for col in range(9):
                if self.entries[row][col] is not None:
                    value = self.entries[row][col].get()
                    if value.isdigit():
                        self.sudoku.grid[row][col] = int(value)
                    else:
                        self.sudoku.grid[row][col] = 0
                        
        Checker = SudokuCheck(self.sudoku.grid)
        if Checker.is_valid_grid():
            print("correct!")
        else:
            print("Duplicates found! Please correct them.")

if __name__ == "__main__":
    root = tk.Tk()
    app = SudokuGrid(root)
    root.mainloop()
